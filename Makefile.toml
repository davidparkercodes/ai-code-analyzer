[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_CRATE_WORKSPACE_MEMBERS = [""]

[tasks.default]
dependencies = ["build"]

[tasks.build]
dependencies = ["build-release-all"]

[tasks.build-release-all]
description = "Build release binaries for all platforms"
dependencies = [
    "build-release-macos",
    "build-release-linux",
    "build-release-windows",
]

[tasks.build-release-macos]
description = "Build macOS release binary"
condition = { platforms = ["mac"] }
command = "cargo"
args = ["build", "--release"]

[tasks.build-release-macos-arm]
description = "Build macOS ARM release binary (when cross-compilation is set up)"
condition = { platforms = ["mac"] }
command = "cargo"
args = ["build", "--release"]
disabled = true

[tasks.build-release-linux]
description = "Build Linux release binary (when cross-compilation is set up)"
command = "cargo"
args = ["build", "--release"]
disabled = true

[tasks.build-release-windows]
description = "Build Windows release binary (when cross-compilation is set up)"
command = "cargo"
args = ["build", "--release"]
disabled = true

[tasks.test]
description = "Run all tests"
command = "cargo"
args = ["test"]

[tasks.test-unit]
description = "Run unit tests"
command = "cargo"
args = ["test", "--", "--nocapture"]

[tasks.install-pre-commit]
description = "Install pre-commit hooks"
command = "pre-commit"
args = ["install"]

[tasks.lint]
description = "Run clippy to lint code"
command = "cargo"
args = ["clippy"]

[tasks.format]
description = "Run rustfmt to format code"
command = "cargo"
args = ["fmt"]

[tasks.clean]
description = "Clean build artifacts"
command = "cargo"
args = ["clean"]

[tasks.release]
description = "Prepare a release build for all platforms"
dependencies = [
    "clean",
    "format",
    "lint",
    "test",
    "build-release-all"
]

[tasks.build-install-mac]
description = "Build and install codeanalyzer to /usr/local/bin on macOS"
condition = { platforms = ["mac"] }
dependencies = ["build-release-macos"]
script = '''
#!/usr/bin/env bash
echo "Installing codeanalyzer to /usr/local/bin..."
if [ -f "target/release/codeanalyzer" ]; then
    # Check if /usr/local/bin exists and is writable, or use sudo
    if [ -w "/usr/local/bin" ]; then
        cp target/release/codeanalyzer /usr/local/bin/
    else
        echo "Need administrator privileges to copy to /usr/local/bin"
        sudo cp target/release/codeanalyzer /usr/local/bin/
    fi
    
    if [ $? -eq 0 ]; then
        echo "Installation successful! You can now use 'codeanalyzer' command from anywhere."
        # Check if /usr/local/bin is in PATH
        if [[ ":$PATH:" != *":/usr/local/bin:"* ]]; then
            echo "Warning: /usr/local/bin is not in your PATH. You may need to add it."
            echo "Add the following line to your ~/.bash_profile or ~/.zshrc:"
            echo 'export PATH="/usr/local/bin:$PATH"'
        fi
    else
        echo "Installation failed."
    fi
else
    echo "Error: Build file not found. Build may have failed."
    exit 1
fi
'''