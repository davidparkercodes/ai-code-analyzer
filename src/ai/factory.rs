use crate::ai::{
    AiModel, AiConfig, AiVendor, ModelTier, AiError,
    anthropic::AnthropicProvider,
    openai::OpenAiProvider,
    mistral::MistralProvider,
};
use std::sync::Arc;
use async_trait::async_trait;

/// Mock AI model for testing when no API keys are available
struct MockAiModel;

#[async_trait]
impl AiModel for MockAiModel {
    fn vendor_name(&self) -> &'static str {
        "Mock Provider"
    }
    
    fn model_name(&self) -> String {
        "mock-model".to_string()
    }
    
    async fn generate_response(&self, prompt: &str) -> Result<String, AiError> {
        let prompt_length = prompt.len();
        
        Ok(format!(
            "This is a mock AI response for testing purposes. \
            The provided prompt was {} characters long. \
            In a real environment, this would be generated by an AI model.",
            prompt_length
        ))
    }
    
    async fn generate_code(&self, prompt: &str, language: Option<&str>) -> Result<String, AiError> {
        let lang = language.unwrap_or("unknown");
        
        Ok(format!(
            "// Mock code generation in {}\n\
            // Generated from a prompt of {} characters\n\
            function mockFunction() {{\n  \
                console.log('This is mock generated code');\n\
                return 'Hello, World!';\n\
            }}",
            lang,
            prompt.len()
        ))
    }
    
    async fn analyze_code(&self, code: &str, prompt: Option<&str>) -> Result<String, AiError> {
        let prompt_info = if let Some(p) = prompt {
            format!(" with a prompt of {} characters", p.len())
        } else {
            String::new()
        };
        
        Ok(format!(
            "Mock code analysis of {} characters{}. \
            This code appears to be well-structured and follows common patterns.",
            code.len(),
            prompt_info
        ))
    }
}

/// Create an AI model instance based on the configuration
/// If API keys are missing, returns a mock model for testing
#[allow(unused)]
pub fn create_ai_model(
    config: AiConfig, 
    tier: ModelTier
) -> Result<Arc<dyn AiModel>, AiError> {
    match config.vendor {
        AiVendor::Anthropic => {
            if config.anthropic_api_key.is_some() {
                let model = AnthropicProvider::new(config, tier)?;
                Ok(Arc::new(model))
            } else {
                Ok(Arc::new(MockAiModel))
            }
        },
        AiVendor::OpenAi => {
            if config.openai_api_key.is_some() {
                let model = OpenAiProvider::new(config, tier)?;
                Ok(Arc::new(model))
            } else {
                Ok(Arc::new(MockAiModel))
            }
        },
        AiVendor::Mistral => {
            if config.mistral_api_key.is_some() {
                let model = MistralProvider::new(config, tier)?;
                Ok(Arc::new(model))
            } else {
                Ok(Arc::new(MockAiModel))
            }
        },
    }
}
